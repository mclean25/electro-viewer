/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TablesTableNameRouteImport } from './routes/tables.$tableName'
import { Route as TablesTableNameEntitiesRouteImport } from './routes/tables.$tableName.entities'
import { Route as TablesTableNameEntityEntityNameRouteImport } from './routes/tables.$tableName.entity.$entityName'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TablesTableNameRoute = TablesTableNameRouteImport.update({
  id: '/tables/$tableName',
  path: '/tables/$tableName',
  getParentRoute: () => rootRouteImport,
} as any)
const TablesTableNameEntitiesRoute = TablesTableNameEntitiesRouteImport.update({
  id: '/entities',
  path: '/entities',
  getParentRoute: () => TablesTableNameRoute,
} as any)
const TablesTableNameEntityEntityNameRoute =
  TablesTableNameEntityEntityNameRouteImport.update({
    id: '/entity/$entityName',
    path: '/entity/$entityName',
    getParentRoute: () => TablesTableNameRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/tables/$tableName': typeof TablesTableNameRouteWithChildren
  '/tables/$tableName/entities': typeof TablesTableNameEntitiesRoute
  '/tables/$tableName/entity/$entityName': typeof TablesTableNameEntityEntityNameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/tables/$tableName': typeof TablesTableNameRouteWithChildren
  '/tables/$tableName/entities': typeof TablesTableNameEntitiesRoute
  '/tables/$tableName/entity/$entityName': typeof TablesTableNameEntityEntityNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/tables/$tableName': typeof TablesTableNameRouteWithChildren
  '/tables/$tableName/entities': typeof TablesTableNameEntitiesRoute
  '/tables/$tableName/entity/$entityName': typeof TablesTableNameEntityEntityNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/tables/$tableName'
    | '/tables/$tableName/entities'
    | '/tables/$tableName/entity/$entityName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/tables/$tableName'
    | '/tables/$tableName/entities'
    | '/tables/$tableName/entity/$entityName'
  id:
    | '__root__'
    | '/'
    | '/tables/$tableName'
    | '/tables/$tableName/entities'
    | '/tables/$tableName/entity/$entityName'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TablesTableNameRoute: typeof TablesTableNameRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tables/$tableName': {
      id: '/tables/$tableName'
      path: '/tables/$tableName'
      fullPath: '/tables/$tableName'
      preLoaderRoute: typeof TablesTableNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tables/$tableName/entities': {
      id: '/tables/$tableName/entities'
      path: '/entities'
      fullPath: '/tables/$tableName/entities'
      preLoaderRoute: typeof TablesTableNameEntitiesRouteImport
      parentRoute: typeof TablesTableNameRoute
    }
    '/tables/$tableName/entity/$entityName': {
      id: '/tables/$tableName/entity/$entityName'
      path: '/entity/$entityName'
      fullPath: '/tables/$tableName/entity/$entityName'
      preLoaderRoute: typeof TablesTableNameEntityEntityNameRouteImport
      parentRoute: typeof TablesTableNameRoute
    }
  }
}

interface TablesTableNameRouteChildren {
  TablesTableNameEntitiesRoute: typeof TablesTableNameEntitiesRoute
  TablesTableNameEntityEntityNameRoute: typeof TablesTableNameEntityEntityNameRoute
}

const TablesTableNameRouteChildren: TablesTableNameRouteChildren = {
  TablesTableNameEntitiesRoute: TablesTableNameEntitiesRoute,
  TablesTableNameEntityEntityNameRoute: TablesTableNameEntityEntityNameRoute,
}

const TablesTableNameRouteWithChildren = TablesTableNameRoute._addFileChildren(
  TablesTableNameRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TablesTableNameRoute: TablesTableNameRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
